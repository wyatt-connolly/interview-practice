name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: devops-interview
  EKS_CLUSTER_NAME: devops-interview-dev
  EKS_CLUSTER_REGION: us-west-2

jobs:
  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Frontend CI/CD
  frontend:
    name: Frontend CI/CD
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push frontend image to Amazon ECR
        working-directory: ./frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-frontend:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-frontend:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY-frontend:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY-frontend:latest

      - name: Update kustomize
        run: |
          cd k8s
          kustomize edit set image devops-interview-frontend=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}-frontend:${{ github.sha }}

      - name: Deploy to EKS
        if: github.ref == 'refs/heads/main'
        run: |
          aws eks update-kubeconfig --region ${{ env.EKS_CLUSTER_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
          kubectl apply -k k8s/

  # Backend CI/CD
  backend:
    name: Backend CI/CD
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run linting
        working-directory: ./backend
        run: npm run lint

      - name: Run tests
        working-directory: ./backend
        run: npm run test:coverage

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push backend image to Amazon ECR
        working-directory: ./backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-backend:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-backend:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY-backend:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY-backend:latest

      - name: Update kustomize
        run: |
          cd k8s
          kustomize edit set image devops-interview-backend=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}-backend:${{ github.sha }}

      - name: Deploy to EKS
        if: github.ref == 'refs/heads/main'
        run: |
          aws eks update-kubeconfig --region ${{ env.EKS_CLUSTER_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
          kubectl apply -k k8s/

  # Infrastructure deployment
  infrastructure:
    name: Infrastructure Deployment
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./infrastructure/environments/dev
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infrastructure/environments/dev
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./infrastructure/environments/dev
        run: terraform apply -auto-approve tfplan

  # Monitoring and testing
  monitoring:
    name: Monitoring and Testing
    runs-on: ubuntu-latest
    needs: [infrastructure]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        run: |
          aws eks update-kubeconfig --region ${{ env.EKS_CLUSTER_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Wait for deployments
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/backend-api -n devops-interview
          kubectl wait --for=condition=available --timeout=300s deployment/frontend-app -n devops-interview

      - name: Run smoke tests
        run: |
          # Test backend health
          kubectl port-forward svc/backend-service 8080:8080 -n devops-interview &
          sleep 10
          curl -f http://localhost:8080/health || exit 1

          # Test frontend health
          kubectl port-forward svc/frontend-service 3000:3000 -n devops-interview &
          sleep 10
          curl -f http://localhost:3000/health || exit 1

      - name: Check application status
        run: |
          kubectl get pods -n devops-interview
          kubectl get services -n devops-interview
          kubectl get ingress -n devops-interview

  # Notifications
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [monitoring]
    if: always()
    steps:
      - name: Notify on success
        if: needs.monitoring.result == 'success'
        run: |
          echo "Deployment successful! üéâ"
          # Add your notification logic here (Slack, email, etc.)

      - name: Notify on failure
        if: needs.monitoring.result == 'failure'
        run: |
          echo "Deployment failed! ‚ùå"
          # Add your notification logic here (Slack, email, etc.)
